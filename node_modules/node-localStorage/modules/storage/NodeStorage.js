'use strict';

const writeAsJSON = require('./fs.js').writeAsJSON;

const WRITE_TIMEOUT = 50;

const copy = v => {
  return {
    key: v.key,
    value: v.value
  };
};

const defineLocalVariable = (ctx, name, value) => {
  Object.defineProperty(ctx, name, {
    value,
    configurable: false,
    enumerable: false
  });
};

const init = (ctx, data) => {
  var def = defineLocalVariable.bind(null, ctx);
  var list = data.map(copy);
  var map = new Map();
  list.forEach(record => map.set(record.key, record));

  def('map', map);
  def('list', list);
};

const writeToDisk = ctx => {
  var timeoutId = ctx.writeTimerId;

  if (timeoutId === -1) {
    ctx.writeTimerId = setTimeout(() => {
      if (ctx.pathToDb) {
        writeAsJSON(ctx.pathToDb, ctx.list);
      }

      ctx.writeTimerId = -1;
    }, WRITE_TIMEOUT);

    return;
  }

  clearTimeout(ctx.writeTimerId);
  ctx.writeTimerId = -1;
  writeToDisk(ctx);
};

/**
 * Generaly object of storage.
 * @constructor
 * @param {string} absolutePathToDbFile - Absolute path to db.
 * @param {Array} data - List of key value pairs.
 */
function NodeStorage(absolutePathToDbFile, data) {
  init(this, data);

  defineLocalVariable(this, 'pathToDb', absolutePathToDbFile);

  Object.defineProperty(this, 'writeTimerId', {
    value: -1,
    writable: true,
    enumerable: false
  });

  Object.defineProperty(this, 'length', {
    get: () => {
      return this.list.length;
    },
    configurable: false,
    enumerable: false
  });
}

NodeStorage.prototype.setItem = function(key, value) {
  var map = this.map;
  var list = this.list;
  var field;

  if (map.has(key)) {
    field = map.get(key);
    field.value = value;
  } else {
    field = {key, value};
    list.push(field);
    map.set(key, field);
  }

  writeToDisk(this);
};

NodeStorage.prototype.getItem = function(key) {
  var map = this.map;

  if (map.has(key)) {
    return map.get(key).value;
  }
};

NodeStorage.prototype.removeItem = function(key) {
  var map = this.map;
  var list = this.list;

  if (map.has(key)) {
    var field;

    map.delete(key);

    for (var i = 0; i < list.length; i++) {
      field = list[i];

      if (field.key === key) {
        list.splice(i, 1);
        break;
      }
    }
  }

  writeToDisk(this);
};

NodeStorage.prototype.clear = function() {
  this.map.clear();
  this.list.splice(0, this.list.length);
  writeToDisk(this);
};

module.exports = NodeStorage;
