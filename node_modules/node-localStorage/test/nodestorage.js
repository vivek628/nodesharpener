'use strict';

const expect = require('chai').expect;
const NodeStorage = require('../modules/storage/NodeStorage.js');

const compareMapKyes = (map, data) => {
  var keys = data.map(records => records.key);

  for (var v of map) {
    var key = v[0];
    expect(true).to.equal(keys.includes(v[0]));
  }
};

describe('NodeStorage', function() {
    var data = [
    {
      key: 'a',
      value: 123
    },
    {
      key: 'b',
      value: 'text'
    }
  ];

  var storage = new NodeStorage(null, data);

  describe('Initialization', function() {
    it('Length Property', function() {
      expect(2).to.equal(storage.length);
    });

    it('List', function() {
      expect(2).to.equal(storage.list.length);
      expect(data).to.eql(storage.list);
    });

    it('Map', function() {
      compareMapKyes(storage.map, data);
    });
  });

  describe('NodeStorage#setItem', function() {
    it('Call methods', function(done) {
      data.push({key: 'c', value: 'new field'});
      data[1].value = 'new value';

      storage.setItem('c', 'new field');
      storage.setItem('b', 'new value');

      this.timeout(1000)
      setTimeout(done, 150);
    });

    it('Length Property', function() {
      expect(3).to.equal(storage.length);
    });

    it('List', function() {
      expect(data).to.eql(storage.list);
    });

    it('Map', function() {
      compareMapKyes(storage.map, data);
    });

  });

  describe('NodeStorage#getItem', function() {
    it('Call method', function() {
      var value = storage.getItem('c');
      expect('new field').to.equal(value);
    });
  });

  describe('NodeStorage#removeItem', function() {
    var removedField = 'a';

    it('Call method', function() {
      storage.removeItem(removedField);
    });

    it('Length Property', function() {
      expect(2).to.equal(storage.length);
    });

    it('List', function() {
      for (var i = 0; i < data.length; i++) {
        if (data[i].key === removedField) {
          data.splice(i, 1);
          break;
        }
      }

      expect(data).to.eql(storage.list);
    });

    it('Map', function() {
      compareMapKyes(storage.map, data);
    });
  });

  describe('NodeStorage#clear', function() {
    it('Call method', function() {
      storage.clear();
    });

    it('List', function() {
      expect(0).to.equal(storage.list.length);
    });

    it('Map', function() {
      expect(0).to.equal(storage.map.size);
    });
  });
});
